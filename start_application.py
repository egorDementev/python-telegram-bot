from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from data_provider import get_continue_kb, get_main_buttons_kb, get_admin_list, get_data_base_object, \
    get_go_to_menu_kb, get_bot_token
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

bot = Bot(token=get_bot_token())
dp = Dispatcher(bot)


# —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def start(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–ü–ü–ü–ü—Ä–∏–≤–µ—Ç, –º—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, '
                           '–ø–æ—Å–ª–µ —á–µ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ ‚ù§Ô∏è',
                           reply_markup=get_continue_kb())


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def home_page(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    all_main_buttons = get_main_buttons_kb()
    con = get_data_base_object()

    main_menu = InlineKeyboardMarkup(row_width=1)

    if str(callback_query.from_user.id) in get_admin_list():
        main_menu.add(all_main_buttons[-1])

    with con:
        psycho_list = [str(x[0]) for x in list(con.execute(f"SELECT id FROM Psychologist;"))]

    if str(callback_query.from_user.id) in psycho_list:
        main_menu.add(all_main_buttons[-2])

    for x in range(len(all_main_buttons) - 2):
        main_menu.add(all_main_buttons[x])
    await callback_query.message.answer_photo(open("resources/pictures/logo.png", "rb"),
                                              caption='–ü—Ä–∏–≤–µ—Ç üëã\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π:',
                                              reply_markup=main_menu)


# user account page
async def user_account(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    con = get_data_base_object()

    future_consultation = []
    count_consult_without_slot = 0

    with con:
        list_con = list(con.execute(f"SELECT tran_id, slot_id FROM Consultation WHERE is_done='0'"))

    print(list_con)

    for i in list_con:
        if i[1] is None:
            with con:
                lst = list(con.execute(f"SELECT user_id FROM Transactions WHERE id={i[0]}"))
            if str(lst[0][0]) == str(callback_query.from_user.id):
                count_consult_without_slot += 1
        else:
            with con:
                lst = list(con.execute(f"SELECT user_id FROM Transactions WHERE id={i[0]}"))
            if str(lst[0][0]) == str(callback_query.from_user.id):
                with con:
                    future_consultation.append(list(con.execute(f"SELECT date, time, psycho_id FROM "
                                                                f"Slot WHERE id={i[1]}")))

    message = "–ü—Ä–∏–≤–µ—Ç üòä\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∑–∞–ø–∏—Å–∞–ª—Å—è(–∞—Å—å):"
    await callback_query.message.answer_photo(open('resources/pictures/user.png', "rb"), caption=message,
                                              reply_markup=get_go_to_menu_kb())

    for x in future_consultation:
        with con:
            psy_name = list(con.execute(f"SELECT name FROM Psychologist WHERE id={x[0][2]}"))[0][0]
        mess = "–ü—Å–∏—Ö–æ–ª–æ–≥: " + str(psy_name) + "\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: " + str(x[0][0]) + "  " + str(x[0][1])
        await bot.send_message(callback_query.from_user.id, mess, reply_markup=None)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def user_problems(message: types.Message):
    con = get_data_base_object()

    with con:
        psycho_list = [str(x[0]) for x in list(con.execute(f"SELECT id FROM Psychologist;"))]
        print(psycho_list)

    if message.text[:3] == 'add' and (str(message.from_user.id) == '596752948' or str(message.from_user.id)
                                      == '840638420'):
        mass = message.text.split('/')
        sql1, data1 = 'INSERT INTO Psychologist (id, name, about, photo, rating) values(?, ?, ?, ?, ?)', []
        data1.append((mass[1], mass[2], mass[3], '–Ω–µ—Ç —Ñ–æ—Ç–æ', 0))

        with con:
            con.executemany(sql1, data1)

        await bot.send_message(message.from_user.id, '10x', reply_markup=get_go_to_menu_kb())
    elif message.text[:3] == 'del' and (str(message.from_user.id) == '596752948' or str(message.from_user.id)
                                        == '840638420'):

        with con:
            con.execute(f"DELETE from Psychologist WHERE id='{message.text[4:]}'")

        await bot.send_message(message.from_user.id, '–ü—Å–∏—Ö–æ–ª–æ–≥ —É–¥–∞–ª–µ–Ω')

    elif message.text[:4] == 'slot' and str(message.from_user.id) in psycho_list:
        mass = message.text.split('/')
        sql1 = 'INSERT INTO Slot (id, psycho_id, date, time, is_free) values(?, ?, ?, ?, ?)'

        with con:
            lst = list(con.execute(f"SELECT * FROM Slot"))
        with con:
            if len(lst) > 0:
                count = int(list(con.execute(f"SELECT MAX(id) FROM Slot"))[0][0])
            else:
                count = 0

        for x in range(1, len(mass)):
            dt = mass[x].split()
            data1 = [(count + x, int(message.from_user.id), dt[0], dt[1], 1)]

            with con:
                con.executemany(sql1, data1)

        await bot.send_message(message.from_user.id, '–í–∞—à–∏ —Å–ª–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', reply_markup=get_go_to_menu_kb())
    elif message.text[:3] == 'all' and (str(message.from_user.id) == '596752948' or str(message.from_user.id)
                                        == '840638420'):
        mass = message.text.split('/')

        with con:
            user_list = list(con.execute(f"SELECT id FROM Person"))

        for user in user_list:
            await bot.send_message(user[0], mass[1])
    else:
        await bot.send_message(message.from_user.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                               reply_markup=get_go_to_menu_kb())


# –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def init_start_application(telegram_bot, dispatcher):
    global bot, dp

    bot = telegram_bot
    dp = dispatcher
    dp.message_handler(commands=['start', 'help'])(start)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('menu'))(home_page)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('user_account'))(user_account)
    dp.message_handler()(user_problems)
