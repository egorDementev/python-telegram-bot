from sqlite3 import OperationalError

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from data_provider import get_continue_kb, get_main_buttons_kb, get_admin_list, get_data_base_object, \
    get_go_to_menu_kb, get_bot_token
from aiogram.types import InlineKeyboardMarkup

bot = Bot(token=get_bot_token())
dp = Dispatcher(bot)

admins_id_list = get_admin_list()


# —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def start(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–ü—Ä–∏–≤–µ—Ç, –º—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞ Connection ‚ù§Ô∏è!\n'
                           '–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞!\n\n'
                           '‚ÄºÔ∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ—Å–∏–º –ø–∏—Å–∞—Ç—å '
                           '–≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É!!',
                           reply_markup=get_continue_kb())


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def home_page(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    all_main_buttons = get_main_buttons_kb()
    con = get_data_base_object()

    main_menu = InlineKeyboardMarkup(row_width=1)

    if str(callback_query.from_user.id) in get_admin_list():
        main_menu.add(all_main_buttons[-1])

    with con:
        psycho_list = [str(x[0]) for x in list(con.execute(f"SELECT id FROM Psychologist;"))]

    if str(callback_query.from_user.id) in psycho_list:
        main_menu.add(all_main_buttons[-2])

    for x in range(len(all_main_buttons) - 2):
        main_menu.add(all_main_buttons[x])
    await callback_query.message.answer_photo(open("resources/pictures/logo.png", "rb"),
                                              caption='–ü—Ä–∏–≤–µ—Ç üëã\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É ‚ù§Ô∏è',
                                              reply_markup=main_menu)


# user account page
async def user_account(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    con = get_data_base_object()

    future_consultations = []
    future_diagnostics = []

    with con:
        list_con = list(con.execute(f"SELECT tran_id, number FROM Consultation WHERE is_done='0'"))

    for i in list_con:
        with con:
            lst = list(con.execute(f"SELECT user_id FROM Transactions WHERE id={int(i[0])}"))
        if str(lst[0][0]) == str(callback_query.from_user.id):
            if i[1] == 0:
                with con:
                    future_diagnostics.append(list(con.execute(f"SELECT psy_id, comment FROM "
                                                               f"Transactions WHERE id={int(i[0])};"))[0])
            else:
                with con:
                    future_consultations.append([list(con.execute(f"SELECT psy_id FROM Transactions "
                                                                  f"WHERE id={int(i[0])};"))[0][0], i[1]])

    message = "–ü—Ä–∏–≤–µ—Ç üòä\n–í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∑–∞–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å)!"
    await callback_query.message.answer_photo(open('resources/pictures/user.png', "rb"), caption=message,
                                              reply_markup=get_go_to_menu_kb())

    if future_diagnostics:
        for x in future_diagnostics:
            with con:
                psy_name = list(con.execute(f"SELECT name FROM Psychologist WHERE id={x[0]};"))[0][0]
            mess = "üß© –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç—Ä–µ—á–∞\n–ü—Å–∏—Ö–æ–ª–æ–≥: " + psy_name + "\n–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏: " + \
                   x[1] + "\n–ü—Å–∏—Ö–æ–ª–æ–≥ —Å –≤–∞–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ, " \
                          "—á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ üíñ\n" \
                          "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ " \
                          "—Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, " \
                          "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
            await bot.send_message(callback_query.from_user.id, mess, reply_markup=None)

        for x in future_consultations:
            with con:
                psy_name = list(con.execute(f"SELECT name FROM Psychologist WHERE id={x[0]}"))[0][0]
            mess = "üíñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º\n–ü—Å–∏—Ö–æ–ª–æ–≥: " + psy_name + "\n–ù–æ–º–µ—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ –ø–∞–∫–µ—Ç–µ: " + \
                   str(x[1]) + "\n–ü—Å–∏—Ö–æ–ª–æ–≥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è " \
                               "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚ù§Ô∏è\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å " \
                               "–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
            await bot.send_message(callback_query.from_user.id, mess, reply_markup=None)


async def send_guide(callback_query: types.CallbackQuery):
    con = get_data_base_object()

    await bot.send_document(callback_query.from_user.id, open("resources/documents/–∫–∞–∫ –Ω–µ —É–≤—è–∑–∞—Ç—å –≤ —Ä—É—Ç–∏–Ω–µ –∏ "
                                                              "—É—á–µ–±–µ –∏ –ø—Ä–æ–∂–∏–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫—É—é –∂–∏–∑–Ω—å —è—Ä–∫–æ.pdf", "rb"),
                            caption="–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—á–µ–Ω—å –Ω–∞–¥–µ–µ—Ç—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –≥–∞–π–¥ –æ–∫–∞–∂–µ—Ç—Å—è –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è —Ç–µ–±—è ‚ù§Ô∏è",
                            reply_markup=None)

    with con:
        con.execute(f"UPDATE Person SET get_guide={1} WHERE id={callback_query.from_user.id};")


# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ sql-–∑–∞–ø—Ä–æ—Å–æ–º
async def sql_request(request, admin_id):
    con = get_data_base_object()

    try:
        with con:
            answer = str(list(con.execute(request)))

        await bot.send_message(admin_id, answer, reply_markup=None)

    except OperationalError:
        await bot.send_message(admin_id, "–û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=None)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_new_psychologist(data, admin_id):
    con = get_data_base_object()

    sql1, data1 = 'INSERT INTO Psychologist (id, name, about, photo) values(?, ?, ?, ?)', []
    data1.append((data[1], data[2], data[3], '–Ω–µ—Ç —Ñ–æ—Ç–æ'))

    try:
        with con:
            con.executemany(sql1, data1)

        await bot.send_message(admin_id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Ñ–æ—Ç–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (–Ω–µ –∫–∞–∫ —Ñ–∞–π–ª)',
                               reply_markup=get_go_to_menu_kb())
    except OperationalError:
        await bot.send_message(admin_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞...", reply_markup=None)


# —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def delete_psychologist(data, admin_id):
    con = get_data_base_object()

    try:
        with con:
            con.execute(f"DELETE from Psychologist WHERE id='{data}'")

        await bot.send_message(admin_id, '–ü—Å–∏—Ö–æ–ª–æ–≥ —É–¥–∞–ª–µ–Ω')

    except OperationalError:
        await bot.send_message(admin_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞...", reply_markup=None)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def mailing(data):
    con = get_data_base_object()

    try:
        with con:
            user_list = list(con.execute(f"SELECT id FROM Person"))

        for user in user_list:
            await bot.send_message(user[0], data)

    except OperationalError:
        for user in admins_id_list:
            await bot.send_message(user, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞...", reply_markup=None)


async def set_date_time_of_consultation(con_id, date_time):
    con = get_data_base_object()

    date_time = '/'.join(date_time)
    print(date_time)

    with con:
        con.execute(f"UPDATE Consultation SET date_time='{str(date_time)}' WHERE id={con_id};")
        tran_id = list(con.execute(f"SELECT tran_id FROM Consultation WHERE id={con_id}"))[0][0]
        con.execute(f"UPDATE Transactions SET comment='{str(date_time)}' WHERE id={tran_id};")
        data = list(con.execute(f"SELECT user_id, psy_id FROM Transactions WHERE id={tran_id};"))[0]
        psy_name = str(list(con.execute(f"SELECT name FROM Psychologist WHERE id={data[1]}"))[0][0])
        user_url = str(list(con.execute(f"SELECT url FROM Person WHERE id={data[0]}"))[0][0])

    await bot.send_message(data[0], f"–ü—Å–∏—Ö–æ–ª–æ–≥ - {psy_name} - –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞ {date_time}!\n–ï—Å–ª–∏ "
                                    f"—É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É!")

    for admin in get_admin_list():
        await bot.send_message(admin, f"–ò–ó–ú–ï–ù–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò\n–ö–ª–∏–µ–Ω—Ç: {user_url}\nUserId: {data[0]}\n"
                                      f"–ü—Å–∏—Ö–æ–ª–æ–≥: {psy_name}\nConsultationID: {con_id}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è "
                                      f"–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {date_time}")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def user_problems(message: types.Message):
    con = get_data_base_object()

    with con:
        psycho_list = [str(x[0]) for x in list(con.execute(f"SELECT id FROM Psychologist;"))]

    if message.text[:3] == 'add' and str(message.from_user.id) in admins_id_list:
        mass = message.text.split('/')
        await add_new_psychologist(mass, message.from_user.id)

    elif message.text[:3] == 'del' and str(message.from_user.id) in admins_id_list:
        await delete_psychologist(message.text[4:], message.from_user.id)

    elif message.text[:3] == 'all' and str(message.from_user.id) in admins_id_list:
        mass = message.text.split('/')
        await mailing(mass[1])

    elif message.text[:3] == 'sql' and str(message.from_user.id) in admins_id_list:
        await sql_request(message.text[4:], message.from_user.id)
    elif str(message.from_user.id) in psycho_list:
        try:
            await set_date_time_of_consultation(message.text.split('/')[0], message.text.split('/')[1:])
            await bot.send_message(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ!', reply_markup=get_go_to_menu_kb())
        except OperationalError:
            await bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ...",
                                   reply_markup=get_go_to_menu_kb())

    else:
        await bot.send_message(message.from_user.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                               reply_markup=get_go_to_menu_kb())


# –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def init_start_application(telegram_bot, dispatcher):
    global bot, dp

    bot = telegram_bot
    dp = dispatcher
    dp.message_handler(commands=['start', 'help'])(start)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('menu'))(home_page)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('user_account'))(user_account)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('guide'))(send_guide)
    dp.message_handler()(user_problems)
