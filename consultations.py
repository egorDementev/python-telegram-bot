from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from data_provider import get_data_base_object, get_show_psycho_kb, get_go_to_menu_kb, get_types_of_consults, \
    get_bot_token
import datetime

bot = Bot(token=get_bot_token())
dp = Dispatcher(bot)


# –æ–∫–Ω–æ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è—Ö
async def need_help(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    await callback_query.message.answer_photo(open("resources/pictures/psy.png", "rb"),
                                              caption='–ù–∞—à–∞ –º–∏—Å—Å–∏—è - —Å–¥–µ–ª–∞—Ç—å —Ç–µ–±—è '
                                                      '—Å—á–∞—Å—Ç–ª–∏–≤–µ–µ ‚ù§Ô∏è\n\n–£ –Ω–∞—Å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é '
                                                      '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –≤—Å—Ç—Ä–µ—á—É —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, '
                                                      '—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å, '
                                                      '–Ω–∞–º–µ—Ç–∏—Ç—å –ø–ª–∞–Ω –¥–∞–ª—å–Ω–µ–π—à–∏–π –¥–µ–π—Å—Ç–≤–∏–π!\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å '
                                                      '—Ç–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä—ã–π '
                                                      '–±—É–¥–µ—Ç —Ç–µ–±–µ –ø–æ –¥—É—à–µ üòä\n'
                                                      '–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '
                                                      '"–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤"',
                                              reply_markup=get_show_psycho_kb())
    await bot.send_message(callback_query.from_user.id, "üö®üö®üö® –í–Ω–∏–º–∞–Ω–∏–µ üö®üö®üö®\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, "
                                                        "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—Å—Ç–æ—è—â—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–≥–æ –ø–æ–∫–∞ "
                                                        "–Ω–µ–ª—å–∑—è!!\n–í—Å–µ, —á—Ç–æ –≤—ã —É–≤–∏–¥–∏—Ç–µ –¥–∞–ª—å—à–µ - —ç—Ç–æ –°–ò–ú–£–õ–Ø–¶–ò–Ø —Ç–æ–≥–æ, "
                                                        "–∫–∞–∫ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ "
                                                        "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!!\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É "
                                                        "—á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ "
                                                        "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –≤—Å—Ç—Ä–µ—á—É –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ "
                                                        "(—Å—Å—ã–ª–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞)  \n–° –ª—é–±–æ–≤—å—é, Connection ‚ù§Ô∏è",
                           reply_markup=None)


# –ø–æ–∫–∞–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
async def psycho(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    con = get_data_base_object()

    with con:
        list_psy = list(con.execute(f"SELECT * FROM Psychologist"))

    code = int(callback_query.data[7:])
    but = InlineKeyboardMarkup(row_width=3)

    but.add(InlineKeyboardButton('‚¨ÖÔ∏è', callback_data='all_psy' + str((code - 1) % len(list_psy))))
    but.add(InlineKeyboardButton('üë© –í—ã–±—Ä–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞',
                                 callback_data='psy_' + str(list_psy[code][0]) + '_' + str(code % len(list_psy))))
    but.add(InlineKeyboardButton('‚û°Ô∏è', callback_data='all_psy' + str((code + 1) % len(list_psy))))
    but.add(InlineKeyboardButton('‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

    await callback_query.message.answer_photo(open('psy_photo//' + str(list_psy[code][0]) + '.jpg', "rb"),
                                              caption=(list_psy[code][1] + '\n' + list_psy[code][2] +
                                                       '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ' +
                                                       str(list_psy[code][4])),
                                              reply_markup=but)


# –ø–æ–∫–∞–∑ —Å–ª–æ—Ç–æ–≤ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
async def psy_slots(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    con = get_data_base_object()

    data = callback_query.data.split('_')
    psy_id = data[1]
    but = InlineKeyboardMarkup()
    if len(data) == 3:
        today = datetime.date.today()
        list_of_date = []

        with con:
            data_list = list(con.execute(f"SELECT date, id FROM Slot Where psycho_id='{psy_id}' and is_free='1';"))

        for date in data_list:
            if today <= datetime.date(int(date[0][:4]), int(date[0][5:7]), int(date[0][8:])):
                if date[0][8:] + '.' + date[0][5:7] not in list_of_date:
                    but.add(InlineKeyboardButton('üìÖ ' + date[0][8:] + '.' + date[0][5:7],
                                                 callback_data='psy_' + psy_id + '_' + str(date[0]) + '_' + data[2]))
                    # –∞–π–¥–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –¥–∞—Ç–∞, –Ω–æ–º–µ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∞
                    list_of_date.append(date[0][8:] + '.' + date[0][5:7])
        but.add(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º', callback_data='all_psy' + data[2]))

        await bot.send_message(callback_query.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å –¥–µ–Ω—å ‚ù§Ô∏è',
                               reply_markup=but)
    else:
        date_of_slots = data[2]

        with con:
            time_list = list(con.execute(f"SELECT time, id FROM Slot WHERE psycho_id='{psy_id}' "
                                         f"and date='{date_of_slots}' and is_free='1';"))
        print(time_list)
        date_of_slots = date_of_slots.split('-')
        date_of_slots = [int(x) for x in date_of_slots]
        for time in time_list:
            slot_time = datetime.time.fromisoformat(time[0])
            now_time = datetime.time.fromisoformat(str(datetime.datetime.now().time()))
            #  + ':' + str(datetime.datetime.now().time().minute))
            if (now_time < slot_time and
                datetime.datetime.now() == datetime.datetime(date_of_slots[0], date_of_slots[1], date_of_slots[2])) or \
                    (datetime.datetime.now() < datetime.datetime(date_of_slots[0], date_of_slots[1], date_of_slots[2])):
                print(1)
                but.add(InlineKeyboardButton('‚è∞ ' + time[0], callback_data='reserve_slot_' + str(time[1])))
        but.add(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º', callback_data='all_psy' + data[3]))

        await bot.send_message(callback_query.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è ‚ù§Ô∏è',
                               reply_markup=but)


# choose type of slot
async def reserve_slot(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    con = get_data_base_object()

    slot_id = callback_query.data.split('_')[2]

    with con:
        list_con = list(con.execute(f"SELECT tran_id, slot_id FROM Consultation WHERE is_done='0'"))

    print(list_con)
    is_free_slot = 0

    for i in list_con:
        if i[1] is None:
            with con:
                lst = list(con.execute(f"SELECT user_id, id FROM Transactions WHERE id={i[0]}"))
            if str(lst[0][0]) == str(callback_query.from_user.id):
                with con:
                    con.execute(f"UPDATE Slot SET is_free='0' WHERE id='{slot_id}'")
                with con:
                    id_con = list(con.execute(f"SELECT id FROM Consultation WHERE tran_id={i[0]} "
                                              f"and slot_id is null"))[0][0]
                with con:
                    con.execute(f"UPDATE Consultation SET slot_id={slot_id} WHERE tran_id={i[0]} and id={id_con}")
                is_free_slot = 1
                await bot.send_message(callback_query.from_user.id,
                                       '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é........! ‚ù§Ô∏è\n'
                                       '–í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é '
                                       '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è—Ö!',
                                       reply_markup=get_go_to_menu_kb())
                with con:
                    psy_id = list(con.execute(f"SELECT psycho_id FROM Slot WHERE id={slot_id}"))[0][0]

                await bot.send_message(psy_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + str(callback_query.from_user.id) +
                                       " –∫ –≤–∞–º –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º "
                                       "–∫–∞–±–∏–Ω–µ—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞)")
        if is_free_slot == 1:
            break

    if not is_free_slot:

        with con:
            condition = list(con.execute(f"SELECT is_free FROM Slot WHERE id='{slot_id}'"))[0][0]

        if int(condition) == 1:
            # with con:
            #     con.execute(f"UPDATE Slot SET is_free='0' WHERE id='{slot_id}'")

            choose_type_of_consult = get_types_of_consults(slot_id)

            await bot.send_message(callback_query.from_user.id,
                                   '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å ‚ù§Ô∏è',
                                   reply_markup=choose_type_of_consult)
        else:
            await bot.send_message(callback_query.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Å–ª–æ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–Ω—è–ª–∏(\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                                                                '–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π',
                                   reply_markup=InlineKeyboardMarkup().add(
                                       InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º', callback_data='all_psy' + '0')))


# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∫–∞–∑–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, —Å–ª–æ—Ç–æ–≤ –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
def init_consultations_application(telegram_bot, dispatcher):
    global bot, dp

    bot = telegram_bot
    dp = dispatcher

    dp.callback_query_handler(lambda c: c.data and c.data.startswith('need_help'))(need_help)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('all_psy'))(psycho)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('psy_'))(psy_slots)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('reserve_slot_'))(reserve_slot)
