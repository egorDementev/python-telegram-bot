from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from data_provider import get_data_base_object, get_show_psycho_kb, get_bot_token, is_can_be_deleted

bot = Bot(token=get_bot_token())
dp = Dispatcher(bot)

sites_about_psychologists = {'332399557': 'http://connection.online.tilda.ws/viktoria_vagapova',
                             '807143565': 'http://connection.online.tilda.ws/anastasia_diveikina',
                             '283800610': 'http://connection.online.tilda.ws/psychologist_natalia_kulikova',
                             '596752948': 'https://t.me/egor_dementev'}


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –±–ª–∏–∂–∞–π—à–∏—Ö 7 –¥–Ω–µ–π –±–µ–∑ —Å—É–±–±–æ—Ç—ã –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
def get_next_7_weekdays():
    today = datetime.today()

    day_names = {0: "–ü–Ω", 1: "–í—Ç", 2: "–°—Ä", 3: "–ß—Ç", 4: "–ü—Ç", 5: "–°–±", 6: "–í—Å"}
    weekdays = []
    count = 0

    while count < 7:
        next_day = today + timedelta(days=1)

        if next_day.weekday() not in [5, 6]:
            weekdays.append([next_day.strftime(f"({day_names[next_day.weekday()]}) %d.%m"),
                             next_day.date().isoformat()])
            count += 1

        today = next_day

    return weekdays


# –æ–∫–Ω–æ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è—Ö
async def need_help(callback_query: types.CallbackQuery):
    if is_can_be_deleted(callback_query.message.date):
        await callback_query.message.delete()

    await callback_query.message.answer_photo(open("resources/pictures/psy.png", "rb"),
                                              caption='–ù–∞—à–∞ –º–∏—Å—Å–∏—è - —Å–¥–µ–ª–∞—Ç—å —Ç–µ–±—è '
                                                      '—Å—á–∞—Å—Ç–ª–∏–≤–µ–µ ‚ù§Ô∏è\n\n–£ –Ω–∞—Å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é '
                                                      '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –≤—Å—Ç—Ä–µ—á—É —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, '
                                                      '—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å, '
                                                      '–Ω–∞–º–µ—Ç–∏—Ç—å –ø–ª–∞–Ω –¥–∞–ª—å–Ω–µ–π—à–∏–π –¥–µ–π—Å—Ç–≤–∏–π!\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å '
                                                      '—Ç–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä—ã–π '
                                                      '–±—É–¥–µ—Ç —Ç–µ–±–µ –ø–æ –¥—É—à–µ üòä\n'
                                                      '–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '
                                                      '"–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤"',
                                              reply_markup=get_show_psycho_kb())


# –ø–æ–∫–∞–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
async def psycho(callback_query: types.CallbackQuery):
    if is_can_be_deleted(callback_query.message.date):
        await callback_query.message.delete()

    con = get_data_base_object()

    with con:
        list_psy = list(con.execute(f"SELECT * FROM Psychologist"))

    code = int(callback_query.data[7:])
    but = InlineKeyboardMarkup(row_width=3)

    but.add(InlineKeyboardButton('üóí –ü–æ–¥—Ä–æ–±–Ω–æ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ', url=sites_about_psychologists[str(list_psy[code][0])]))
    but.row(InlineKeyboardButton('‚¨ÖÔ∏è', callback_data='all_psy' + str((code - 1) % len(list_psy))),
            InlineKeyboardButton('üë© –í—ã–±—Ä–∞—Ç—å',
                                 callback_data='psy_' + str(list_psy[code][0]) + '_' + str(code)),
            InlineKeyboardButton('‚û°Ô∏è', callback_data='all_psy' + str((code + 1) % len(list_psy))))
    but.add(InlineKeyboardButton('‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

    await callback_query.message.answer_photo(open('psy_photo//' + str(list_psy[code][0]) + '.jpg', "rb"),
                                              caption=(list_psy[code][1] + '\n\n' + list_psy[code][2] + '\n\n' +
                                                       list_psy[code][3]),
                                              reply_markup=but)


# –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞
async def choose_type(callback_query: types.CallbackQuery):
    if is_can_be_deleted(callback_query.message.date):
        await callback_query.message.delete()

    data = callback_query.data.split('_')
    psy_id = data[1]
    but = InlineKeyboardMarkup()
    but.add(InlineKeyboardButton('üß© –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç—Ä–µ—á–∞', callback_data='diagnostic_' + psy_id))
    # but.add(InlineKeyboardButton('üíñ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', callback_data='makeConsultation_' + psy_id))
    but.add(InlineKeyboardButton('üë© –ù–∞–∑–∞–¥ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º', callback_data='all_psy' + data[2]))

    await bot.send_message(callback_query.from_user.id,
                           '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ‚ù§Ô∏è',
                           reply_markup=but)


# –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –≤—Å—Ç—Ä–µ—á–∏
async def choose_day_for_diagnostic(callback_query: types.CallbackQuery):
    if is_can_be_deleted(callback_query.message.date):
        await callback_query.message.delete()

    psy_id = callback_query.data.split('_')[1]

    days_kb = InlineKeyboardMarkup()
    days = get_next_7_weekdays()
    for i in range(len(days)):
        days_kb.add(InlineKeyboardButton('üóì ' + days[i][0], callback_data='create_tran_' + psy_id + '_0_' + days[i][1]))

    days_kb.add(InlineKeyboardButton('‚û°Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

    await bot.send_message(callback_query.from_user.id,
                           "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –≤—Å—Ç—Ä–µ—á—É —Å "
                           "–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.\n–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ–º–µ–Ω—è—é—Ç—Å—è –ø–ª–∞–Ω—ã, —Ç–æ –¥–∞—Ç—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å, –æ–±–≥–æ–≤–æ—Ä–∏–≤ "
                           "—Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.\n–í—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–±–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.",
                           reply_markup=days_kb)


# –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
async def choose_tariff(callback_query: types.CallbackQuery):
    if is_can_be_deleted(callback_query.message.date):
        await callback_query.message.delete()

    psy_id = callback_query.data.split('_')[1]

    tariff_kb = InlineKeyboardMarkup()
    tariff_kb.add(InlineKeyboardButton('‚ù§ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - 1599 —Ä—É–±', callback_data='create_tran_' + psy_id + '_1'))
    tariff_kb.add(InlineKeyboardButton('‚ù§ 3 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ - 4499 —Ä—É–±', callback_data='create_tran_' + psy_id + '_3'))
    tariff_kb.add(InlineKeyboardButton('‚ù§ 5 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π - 7199 —Ä—É–±', callback_data='create_tran_' + psy_id + '_5'))
    tariff_kb.add(InlineKeyboardButton('‚ù§ 10 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - 13399 —Ä—É–±', callback_data='create_tran_' + psy_id + '_10'))
    tariff_kb.add(InlineKeyboardButton('‚û°Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

    await bot.send_message(callback_query.from_user.id,
                           "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∞–∫–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.",
                           reply_markup=tariff_kb)


# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∫–∞–∑–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, —Å–ª–æ—Ç–æ–≤ –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
def init_consultations_application(telegram_bot, dispatcher):
    global bot, dp

    bot = telegram_bot
    dp = dispatcher

    dp.callback_query_handler(lambda c: c.data and c.data.startswith('need_help'))(need_help)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('all_psy'))(psycho)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('psy_'))(choose_type)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('diagnostic_'))(choose_day_for_diagnostic)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('makeConsultation_'))(choose_tariff)


# with con:
#     psy_id = list(con.execute(f"SELECT psycho_id FROM Slot WHERE id={slot_id}"))[0][0]
#
# await bot.send_message(psy_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + str(callback_query.from_user.id) +
#                        " –∫ –≤–∞–º –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º "
#                        "–∫–∞–±–∏–Ω–µ—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞)")
