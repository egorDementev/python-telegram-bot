from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.work_with_db import if_register, add_new_person
from data_provider import get_contract_kb, get_start_kb, get_go_to_menu_kb, get_bot_token, get_super_admin_id
from datetime import datetime
from start_application import write_log_to_file

bot = Bot(token=get_bot_token())
dp = Dispatcher(bot)


# –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º - –¥–æ–≥–æ–≤–æ—Ä–æ–º
async def send_contract_message(cq, kb):
    await bot.send_document(cq.from_user.id, open("resources/documents/contract.docx", "rb"),
                            caption="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º(–æ—Ñ–µ—Ä—Ç–∞ –Ω–∞ –æ–∫–∞–∑–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å–∫–∏—Ö –£—Å–ª—É–≥)"
                                    " –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –µ–≥–æ —É—Å–ª–æ–≤–∏—è",
                            reply_markup=kb)


# –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º - —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def send_agreement_message(cq, kb):
    await bot.send_document(cq.from_user.id, open("resources/documents/personal_data.docx", "rb"),
                            caption="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                            reply_markup=kb)


# –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ–≥–æ–≤–æ—Ä –∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def attach(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    data = callback_query.data.split('_')

    if int(data[1]) == int(data[2]) == 0:
        await bot.send_message(callback_query.from_user.id, "–¢–∞–∫ –∫–∞–∫ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏–º–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –±—É–¥–µ—Ç "
                                                            "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —É—Å–ª—É–≥–∞ –ø–æ–¥–±–æ—Ä–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, —Ç–æ, —á—Ç–æ–±—ã "
                                                            "–æ–±–µ–∑–æ–ø–∞—Å–∏—Ç—å —Å–µ–±—è –∏ –Ω–∞—Å, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ "
                                                            "—Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏!!\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º "
                                                            "–≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º, "
                                                            "–∞ —Ç–∞–∫ –∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö "
                                                            "–¥–∞–Ω–Ω—ã—Ö.")
        await send_contract_message(callback_query, InlineKeyboardMarkup().add(get_contract_kb()[0]))

    elif int(data[1]) == 1 and int(data[2]) == 0:
        await send_contract_message(callback_query, InlineKeyboardMarkup().add(get_contract_kb()[1]))
        await send_agreement_message(callback_query, InlineKeyboardMarkup().add(get_contract_kb()[2]))

    elif int(data[1]) == 1 and int(data[2]) == 1:
        await send_agreement_message(callback_query, InlineKeyboardMarkup().add(get_contract_kb()[3]))
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!",
                               reply_markup=get_start_kb())

        log_text = f"LOG: accept [{datetime.now().isoformat()}] " \
                   f"UserID={callback_query.from_user.id} " \
                   f"UserURL={f'https://t.me/{callback_query.from_user.username if callback_query.from_user.username else None}'}"

        await bot.send_message(get_super_admin_id(), log_text, reply_markup=None)
        await write_log_to_file('logs.txt', log_text)


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def start_bot(callback_query: types.CallbackQuery):

    await callback_query.message.delete()
    if if_register(callback_query.from_user.id):
        await bot.send_message(callback_query.from_user.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ‚ù§Ô∏è',
                               reply_markup=get_go_to_menu_kb())
    else:
        add_new_person(
            callback_query.from_user.id,
            f"https://t.me/"
            f"{callback_query.from_user.username if callback_query.from_user.username else '–Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}")

        await bot.send_message(callback_query.from_user.id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª—Å—è(–ª–∞—Å—å) –Ω–∞–º ‚ù§',
                               reply_markup=None)
        media = types.MediaGroup()
        media.attach_photo(types.InputFile('resources/pictures/check_up.png'))

        await bot.send_media_group(callback_query.from_user.id, media=media)
        await bot.send_message(callback_query.from_user.id, '–í –Ω–∞—à–µ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∏ '
                                                            '–æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º üéâ\n'
                                                            '–î–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞, –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é '
                                                            '–±—É–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é. –¢–∞–∫, —Ç—ã '
                                                            '—Å–º–æ–∂–µ—à—å –Ω–∞–≥–ª—è–¥–Ω–æ –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å, –≤ –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ —á–∞—â–µ –≤—Å–µ–≥–æ '
                                                            '–≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ, –µ—Å–ª–∏ –±—É–¥–µ—Ç –∂–µ–ª–∞–Ω–∏–µ, —Å–º–æ–∂–µ—à—å '
                                                            '–ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—É.\nP.S. –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è '
                                                            '–ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞ –∏ '
                                                            '–Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.', reply_markup=None)

        media = types.MediaGroup()
        media.attach_photo(types.InputFile('resources/pictures/example.png'),
                           'üìà –ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é')

        await bot.send_media_group(callback_query.from_user.id, media=media)

        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('üîú –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='subscribe'))
        await bot.send_message(callback_query.from_user.id, '–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!',
                               reply_markup=kb)


async def subscribe(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    message = '–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã ' \
              '—Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º:\nüîπ –æ—Ç–≤–µ—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\nüîπ —Å–æ–≤–µ—Ç—ã –ø–æ "–≤—ã–∂–∏–≤–∞–Ω–∏—é" –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\nüîπ ' \
              '–ø–æ–¥–Ω–∏–º–∞–µ–º –º–Ω–æ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–æ–≥–∏–º –∏–∑ –≤–∞—Å –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—Å—è'

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url='https://t.me/connectionBotChannel'))
    kb.add(InlineKeyboardButton('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='s_check'))

    await callback_query.message.answer_photo(open('resources/pictures/tg.png', "rb"), caption=message,
                                              reply_markup=kb)


async def check_subscribe(callback_query: types.CallbackQuery):

    user_channel_status = await bot.get_chat_member(chat_id=-1001737343585,
                                                    user_id=callback_query.from_user.id)
    if user_channel_status["status"] != 'left':
        await successful_subscribe(callback_query)
    else:
        await bot.send_message(callback_query.from_user.id, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª...\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, "
                                                            "–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑ ‚ù§Ô∏è")


async def successful_subscribe(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    await bot.send_message(callback_query.from_user.id, '–°–ø–∞—Å–∏–±–æ ‚ù§Ô∏è\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                           reply_markup=get_go_to_menu_kb())

    log_text = f"LOG: registered [{datetime.now().isoformat()}] " \
               f"UserID={callback_query.from_user.id} " \
               f"UserURL={f'https://t.me/{callback_query.from_user.username if callback_query.from_user.username else None}'}"

    await bot.send_message(get_super_admin_id(), log_text, reply_markup=None)
    await write_log_to_file('logs.txt', log_text)


def init_registration(telegram_bot, dispatcher):
    global bot, dp

    bot = telegram_bot
    dp = dispatcher

    dp.callback_query_handler(lambda c: c.data and c.data.startswith('attach'))(attach)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('run'))(start_bot)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('subscribe'))(subscribe)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith('s_check'))(check_subscribe)

